syntax on   "syntax highlight
set nu
set tabstop=4
set shiftwidth=4
set softtabstop=4
au BufNewFile,BufRead *.html,*js,*.vue set tabstop=2
au BufNewFile,BufRead *.html,*js,*.vue set shiftwidth=2
au BufNewFile,BufRead *.html,*js,*.vue set softtabstop=2
au BufNewFile,BufRead *.html,*js,*.vue set fileformat=unix
set expandtab
set autoindent
set smartindent    "# jump 0
"set cindent
set nowrap
set nocompatible
set incsearch
set hlsearch
set t_Co=256
set encoding=utf-8
set termencoding=utf-8
set fileencodings=utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1
set laststatus=2
set bs=indent,eol,start		" allow backspacing over everything in insert mode
set viminfo='20,\"50	" read/write a .viminfo file, don't store more " than 50 lines of registers
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set cursorline
set showcmd
"set cursorcolumn
"set ai			" always set autoindenting on
"set backup		" keep a backup file

"Quickly Run
map <End> :call CompileRunGcc()<CR>
func! CompileRunGcc()
        exec "w"
        if &filetype == 'c'
            exec '!gcc -g %'
            exec '!./a.out'
        elseif &filetype =='cpp'
            exec '!g++ -g %'
            exec '!time ./a.out'
        elseif &filetype == 'python'
            exec '!time python3 %'
        endif
endfunc

"Uncomment the following to have Vim jump to the last position when reopening a file
if has("autocmd")
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

"Vundlevim plugin
filetype off
set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'Lokaltog/vim-powerline'
Plugin 'Yggdroot/indentLine'
Plugin 'mattn/emmet-vim'
Plugin 'preservim/nerdtree'
Plugin 'posva/vim-vue'
Plugin 'tpope/vim-commentary'
Plugin 'prettier/vim-prettier'
Plugin 'leafgarland/typescript-vim'
" Plugin 'Valloric/YouCompleteMe'
call vundle#end()
filetype plugin indent on

"Nerdtree
map <F3> :NERDTreeToggle<CR>
imap <F3> <ESC> :NERDTreeToggle<CR>
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
"Nerdtree autoopen
"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

"Indentline options
let g:indentLine_char='┆'
let g:indentLine_enabled = 1

""YouCompeleMe
"set completeopt=longest,menu "让Vim的补全菜单行为与一般IDE一致(参考VimTip1228)
"autocmd InsertLeave * if pumvisible() == 0|pclose|endif "离开插入模式后自动关闭预览窗口
"inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>" "回车即选中当前项
""上下左右键的行为 会显示其他信息
"inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
"inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
"inoremap <expr> <PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<PageDown>"
"inoremap <expr> <PageUp>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<PageUp>"
""youcompleteme  默认tab  s-tab 和自动补全冲突
""let g:ycm_key_list_select_completion=['<c-n>'] "let g:ycm_key_list_select_completion = ['<Down>']
""let g:ycm_key_list_previous_completion=['<c-p>']
""let g:ycm_key_list_previous_completion = ['<Up>']
"let g:ycm_confirm_extra_conf=0 "关闭加载.ycm_extra_conf.py提示
"let g:ycm_collect_identifiers_from_tags_files=1 " 开启 YCM 基于标签引擎
"let g:ycm_min_num_of_chars_for_completion=1 " 从第2个键入字符就开始罗列匹配项
"let g:ycm_cache_omnifunc=0 " 禁止缓存匹配项,每次都重新生成匹配项
"let g:ycm_seed_identifiers_with_syntax=1 " 语法关键字补全
""nnoremap <F5> :YcmForceCompileAndDiagnostics<CR> "force recomile with syntastic
""nnoremap <leader>lo :lopen<CR> "open locationlist
""nnoremap <leader>lc :lclose<CR> "close locationlist
""inoremap <leader><leader> <C-x><C-o>
""在注释输入中也能补全
"let g:ycm_complete_in_comments = 1
""在字符串输入中也能补全
"let g:ycm_complete_in_strings = 1
""注释和字符串中的文字也会被收入补全
"let g:ycm_collect_identifiers_from_comments_and_strings = 0
"nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR> 
"" 跳转到定义处
